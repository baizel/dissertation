 function BellmanFord(list vertices, list edges, vertex source)
   ::distance[],predecessor[]

   for each vertex v in vertices:    // Step 1: initialize graph
       distance[v] := inf             // Initialize the distance to all vertices to infinity
       predecessor[v] := null         // And having a null predecessor

   distance[source] := 0              // The distance from the source to itself is, of course, zero


   for i from 0 to size(vertices)-1: //Step 2: relax edges repeatedly
       for each edge (u, v) with weight w in edges:
           if distance[u] + w < distance[v]:
               distance[v] := distance[u] + w
               predecessor[v] := u


   for each edge (u, v) with weight w in edges: // Step 3: check for negative-weight cycles
       if distance[u] + w < distance[v]:
           error "Graph contains a negative-weight cycle" // The algorithm has found a negative weight cycle (total distance of the cycle is negative) This is an illegal state

   return distance[], predecessor[]