 <b>Algorithm</b>: Dijkstra
 <b>Inputs</b>: Graph(V,E), Source
 <b>Variables</b>: distance: list where the index represents the node
            previous: list where the index represents the node
 <b>Return</b>: list of distances
 <b>Begin</b>
     <b>for each</b> vertex v <b>in</b> Graph <b>do</b>:        // Initialization
         distance[v] = infinity                                 // Set All distances to be infinity in the list
         previous[v] = undefined                                // Previous node in an optimal path from source
     <b>done</b>

     distance[source] = 0                                       // Set source distance to be 0 since we are already here.
     Q = the set of all nodes in Graph                          // All nodes in the network are present in this set

     <b>while</b> Q <b>is not</b> empty <b>do</b>:              // Loop terminates when Q is empty
         u = node <b>in</b> Q <b>with</b> smallest distance     // Find the node with smallest distance from current node
         <b>remove</b> u <b>from</b> Q                          // Remove u from the list of nodes so it will not be used again
         <b>for each</b> neighbour v <b>of</b> u <b>do</b>:     // Run the loop for each neighbour of u
              alternative = distance[u] + distanceBetween(u,v)  // For each neighbour calculate alternative distance which is the distance of u + the distanceBetween u and v
              <b>if</b> alternative < distance[v]:              // If alternative is less than distance that is previously stores then we have found a new shortest distance
                  distance[v] = alternative                     // Update the new shorter distance
                  previous[v] = u                               // Set previous optimal node to be u
               <b>fi</b>
         <b>done</b>
     <b>done</b>
     <b>return</b> distance[] previous[]
 <b>End</b>